<resources>
    <string name="app_name">设计模式</string>
    <string name="singleton">单例</string>
    <string name="prototype">原型</string>
    <string name="factory_method">工厂方法</string>
    <string name="abstract_factory">抽象工厂</string>
    <!--单例-->
    <string name="singleton_hungry">饿汉式</string>
    <string name="singleton_hungry_desc">特点是类一旦加载就创建一个单例，保证在调用 getInstance 方法之前单例已经存在了。 饿汉式单例在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以是线程安全的，可以直接用于多线程而不会出现问题。</string>
    <string name="singleton_lazy">懒汉式</string>
    <string name="singleton_lazy_desc">注意：如果编写的是多线程程序，则不要删除代码中的关键字 volatile 和 synchronized，否则将存在线程非安全的问题。 如果不删除这两个关键字就能保证线程安全，但是每次访问时都要同步，会影响性能，且消耗更多的资源，这是懒汉式单例的缺点。</string>
    <string name="singleton_double_check">双重检查</string>
    <string name="singleton_double_check_desc">优点是资源利用率高，第一次执行getInstance时单例对象才被实例化，效率高。 缺点是第一次加载时反应稍慢一些，在高并发环境下也有一定的缺陷，虽然发生的概率很小。 DCL虽然在一定程度解决了资源的消耗和多余的同步，线程安全等问题，但是他还是在某些情况会出现失效的问题，也就是DCL失效。</string>
    <string name="singleton_static_inner_class">静态内部类</string>
    <string name="singleton_static_inner_class_desc">类创建的时候不会初始化sInstance，只有第一次调用getInstance方法时虚拟机加载SingletonHolder并初始化sInstance，这样不仅能确保线程安全也能保证Singleton类的唯一性，所以推荐使用静态内部类单例模式。</string>
    <!--原型-->
    <string name="prototype_circle_hint">请输入圆的半径</string>
    <string name="prototype_circle_desc">半径为%1$s的圆，它的面积是：%2$s</string>
    <string name="prototype_square_hint">请输入正方形的边长</string>
    <string name="prototype_square_desc">边长为%1$s的正方形，它的面积是：%2$s</string>
    <string name="prototype_rectangle_long_hint">请输入长方形的长</string>
    <string name="prototype_rectangle_wide_hint">请输入长方形的宽</string>
    <string name="prototype_rectangle_desc">长为%1$s宽为%2$s的长方形，它的面积是：%3$s</string>
    <string name="prototype_triangle_end_hint">请输入三角形的底</string>
    <string name="prototype_triangle_high_hint">请输入三角形的高</string>
    <string name="prototype_triangle_desc">底为%1$s高为%2$s的三角形，它的面积是：%3$s</string>
    <!--工厂方法-->
    <string name="factory_method_desc">工厂方法：只考虑同等级产品的生产。例如：畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。</string>
    <!--抽象工厂-->
    <string name="abstract_factory_desc">抽象工厂：考虑多等级产品的生产。例如：农场里既养动物又种植物、电器厂既生产电视机又生产洗衣机或空调、大学既有软件专业又有生物专业等。</string>
</resources>
